basePath: /api/v1
definitions:
  commonreq.ConcertAddReq:
    properties:
      address:
        description: 演唱会地址
        type: string
      concert_date:
        description: 演唱会日期
        type: string
      concert_end_date:
        description: 演唱会结束日期
        type: string
      concert_id:
        description: 演唱会ID
        type: string
      concert_img:
        description: 演唱会图片
        type: string
      concert_name:
        description: 演唱会名称
        type: string
      concert_status:
        description: '演唱会状态（0: 未开始, 1: 已过期, 2: 已取消）'
        type: integer
      lottery_end_date:
        description: 抽奖结束时间
        type: string
      lottery_start_date:
        description: 抽奖开始时间
        type: string
      remark:
        description: 演唱会备注信息
        type: string
      review_status:
        description: '审核状态（0: 未审核, 1: 审核通过, 2: 审核失败）'
        type: integer
      tickets:
        description: 演唱会门票列表
        items:
          $ref: '#/definitions/commonreq.Ticket'
        type: array
    type: object
  commonreq.ConcertCancelReq:
    properties:
      cancel_reason:
        description: 是否通过
        type: string
      concert_id:
        description: 提交的演唱会id
        type: string
    type: object
  commonreq.ConcertPublishReq:
    properties:
      concert_id:
        description: 提交的演唱会id
        type: string
    type: object
  commonreq.ConcertReViewReq:
    properties:
      concert_id:
        description: 提交的演唱会id
        type: string
      pass:
        description: 是否通过
        type: boolean
    type: object
  commonreq.Ticket:
    properties:
      max_quantity_per_wallet:
        description: 每个钱包最大可购买数量
        type: integer
      num:
        description: 门票数量
        type: integer
      price:
        description: 门票价格
        type: string
      ticket_id:
        description: 门票ID
        type: string
      ticket_img:
        description: 门票图片
        type: string
      ticket_type:
        description: 门票类型唯一键（对应抵押品合约和抽选合约）
        type: string
      trade:
        description: 是否可以二手交易
        type: boolean
      type_name:
        description: 门票类型名称
        type: string
    type: object
  commonresp.CommitResp:
    properties:
      code:
        description: 返回状态码
        type: integer
      msg:
        description: 返回消息
        type: string
      reason:
        description: 错误原因
        type: string
      request_id:
        description: 请求ID
        type: string
      result:
        allOf:
        - $ref: '#/definitions/commonresp.ResultData'
        description: 返回结果
      status:
        description: 返回状态
        type: string
    type: object
  commonresp.Concert:
    properties:
      address:
        description: 演唱会地点
        type: string
      cancel_reason:
        description: 取消原因
        type: string
      concert_date:
        description: 演唱会日期
        type: string
      concert_end_date:
        description: 演唱会结束日期
        type: string
      concert_id:
        description: 演唱会ID
        type: string
      concert_img:
        description: 演唱会图片
        type: string
      concert_name:
        description: 演唱会名称
        type: string
      concert_status:
        description: 演唱会状态
        type: integer
      lottery_end_date:
        description: 彩票开始日期
        type: string
      lottery_start_date:
        description: 彩票开始日期
        type: string
      remark:
        description: 演唱会备注
        type: string
      review_status:
        description: 审核状态
        type: integer
      status:
        description: 演唱会状态
        type: string
      ticket_types:
        description: 门票类型列表
        items:
          $ref: '#/definitions/commonresp.TicketType'
        type: array
    type: object
  commonresp.ConcertListResponse:
    properties:
      code:
        type: integer
      msg:
        type: string
      reason:
        type: string
      request_id:
        type: string
      result:
        items:
          $ref: '#/definitions/commonresp.Concert'
        type: array
      status:
        type: string
    type: object
  commonresp.LotteryListResponse:
    properties:
      code:
        type: integer
      msg:
        type: string
      reason:
        type: string
      request_id:
        type: string
      result:
        properties:
          lottery_list:
            items:
              type: string
            type: array
        type: object
      status:
        type: string
    type: object
  commonresp.ResultData:
    properties:
      concert_id:
        description: 演唱会ID
        type: string
    type: object
  commonresp.SoldTicket:
    properties:
      concert_name:
        type: string
      price:
        type: number
      seller:
        type: string
      token_id:
        type: string
      type_name:
        type: string
      url:
        type: string
    type: object
  commonresp.TicketListResponse:
    properties:
      code:
        type: integer
      msg:
        type: string
      reason:
        type: string
      request_id:
        type: string
      result:
        items:
          $ref: '#/definitions/commonresp.SoldTicket'
        type: array
      status:
        type: string
    type: object
  commonresp.TicketType:
    properties:
      create_at:
        description: 创建时间
        type: string
      max_quantity_per_wallet:
        description: 单个钱包最大购买数量
        type: integer
      num:
        description: 数量
        type: integer
      price:
        description: 价格
        type: number
      ticket_img:
        description: 票图片
        type: string
      ticket_type:
        description: 门票种类唯一键
        type: integer
      trade:
        description: 是否交易
        type: boolean
      type_name:
        description: 类型名称
        type: string
      update_at:
        description: 更新时间
        type: string
    type: object
  user.RequestBody:
    properties:
      message:
        type: string
      signature:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample API for Your Project using Gin and Swagger
  title: Your Project API
  version: "1.0"
paths:
  /concert/cancel:
    post:
      consumes:
      - application/json
      description: Cancel concerts
      parameters:
      - description: Concert Cancel Request
        in: body
        name: concertCancelReq
        required: true
        schema:
          $ref: '#/definitions/commonreq.ConcertCancelReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commonresp.ConcertListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commonresp.ConcertListResponse'
      summary: Cancel concerts
      tags:
      - Concert
  /concert/commit:
    post:
      consumes:
      - application/json
      description: Add a new concert with the given details
      parameters:
      - description: Concert Add Request
        in: body
        name: concertAddReq
        required: true
        schema:
          $ref: '#/definitions/commonreq.ConcertAddReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commonresp.CommitResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commonresp.CommitResp'
      summary: Add a new concert
      tags:
      - Concert
  /concert/concert_list:
    get:
      consumes:
      - application/json
      description: Get list of concerts by IDs with pagination
      parameters:
      - description: Comma-separated list of concert IDs
        in: query
        name: ids
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commonresp.ConcertListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commonresp.ConcertListResponse'
      summary: Get list of concerts
      tags:
      - Concert
  /concert/publish:
    post:
      consumes:
      - application/json
      description: publish concerts
      parameters:
      - description: Concert publish Request
        in: body
        name: ConcertPublishReq
        required: true
        schema:
          $ref: '#/definitions/commonreq.ConcertPublishReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commonresp.ConcertListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commonresp.ConcertListResponse'
      summary: publish concerts
      tags:
      - Concert
  /concert/review:
    post:
      consumes:
      - application/json
      description: Review concerts
      parameters:
      - description: Concert Review Request
        in: body
        name: concertReviewReq
        required: true
        schema:
          $ref: '#/definitions/commonreq.ConcertReViewReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commonresp.ConcertListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commonresp.ConcertListResponse'
      summary: Review concerts
      tags:
      - Concert
  /concert/update_status:
    post:
      consumes:
      - application/json
      description: update concert
      parameters:
      - description: Comma-separated list of concert IDs
        in: query
        name: ConcertId
        required: true
        type: integer
      - description: '演唱会状态（0: 未开始, 1: 已过期, 2: 已取消）'
        in: query
        name: ConcertStatus
        type: integer
      - description: '审核状态（0: 未审核, 1: 审核通过, 2: 审核失败）'
        in: query
        name: ReviewStatus
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commonresp.CommitResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commonresp.CommitResp'
      summary: update concert
      tags:
      - Concert
  /lottery/list:
    get:
      consumes:
      - application/json
      description: GETLotterylist
      parameters:
      - description: ' concert_id'
        in: query
        name: concert_id
        type: string
      - description: ticket_type
        in: query
        name: ticket_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commonresp.LotteryListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commonresp.LotteryListResponse'
      summary: Get Lottery Address
      tags:
      - Lottery
  /lottery/ticketList:
    get:
      description: GETTicketlist
      parameters:
      - description: Lottery Address
        in: query
        name: lottery_address
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commonresp.TicketListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commonresp.TicketListResponse'
      summary: ticket list
      tags:
      - Lottery
  /user/logout:
    get:
      description: Get personal information
      produces:
      - application/json
      responses:
        "200":
          description: logout retrieved successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get personal information
  /user/nonce:
    get:
      description: Generate nonce for session
      produces:
      - application/json
      responses:
        "200":
          description: Nonce generated successfully
          schema:
            type: string
      summary: Generate nonce
  /user/personal_information:
    get:
      description: Get personal information
      produces:
      - application/json
      responses:
        "200":
          description: Personal information retrieved successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get personal information
  /user/verify:
    post:
      consumes:
      - application/json
      description: Verify signature with message and nonce
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Verification success
          schema:
            type: boolean
        "400":
          description: Verification failed
          schema:
            type: string
      summary: Verify signature
swagger: "2.0"
